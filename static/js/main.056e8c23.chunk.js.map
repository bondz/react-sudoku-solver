{"version":3,"sources":["assets/nextstack-logo.png","assets/jp.png","components/Board/Sections/SectionRow/Section/CellRow/Cell/Cell.js","components/Board/Sections/SectionRow/Section/CellRow/CellRow.js","components/Board/Sections/SectionRow/Section/Section.js","components/Board/Sections/SectionRow/SectionRow.js","components/Board/Sections/Sections.js","components/Board/Board.js","components/Spinner/Spinner.js","components/Button/Button.js","components/Circle/Circle.js","components/StepsLog/LogsDetails/SolutionStep/SolutionStep.js","components/StepsLog/LogsDetails/LogsDetails.js","components/StepsLog/StepLogs.js","components/Backdrop/Backdrop.js","components/Modal/Modal.js","components/Icons/AlertTriangle/AlertTriangle.js","components/NewBoardForm/ErrorMessage/ErrorMessage.js","components/NewBoardForm/NewBoardForm.js","components/Icons/CheckCircle/CheckCircle.js","components/Icons/XCircle/XCircle.js","components/Icons/Stopwatch/Stopwatch.js","services/Solver/constants.js","components/StatusMessage/StatusMessage.js","services/Solver/logs.js","services/Solver/utils.js","services/Solver/solver.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","cell","props","cellValue","value","react_default","a","createElement","className","class","key","cellRow","cells","map","index","Cell","section","cellRows","nameKey","CellRow","sectionRow","Section","sections","sectionIndex","SectionRow","board","Sections","name","spinner","button","_React$useState","React","useState","_React$useState2","Object","slicedToArray","showSpinner","setShowSpinner","useEffect","isSpinning","timeout","setTimeout","clearTimeout","_React$useState3","_React$useState4","width","setWidth","_React$useState5","_React$useState6","height","setHeight","ref","useRef","current","getBoundingClientRect","classes","fadeOutProps","useSpring","opacity","fadeInProps","style","concat","onClick","click","web","div","Spinner","label","circle","solutionStep","solutionStepNumber","method","msg","logsDetails","stepsLog","stepRow","stepIndex","SolutionStep","LogsDetails","backdrop","show","clicked","modal","Backdrop","modalClosed","transform","children","alertTriangle","viewBox","fill","xmlns","fillRule","d","errorMessage","error","AlertTriangle","newBoardForm","inputRef","focus","type","onChange","changed","currentStringBoard","placeholder","ErrorMessage","Button","checkCircle","xCircle","stopWatch","rows","split","cols","rRows","cCols","STATUS","STRATEGIES","emptySudokuString","repeat","acceptedStringRegExp","initialSudokuString","statusMessage","status","CheckCircle","XCircle","Stopwatch","timeElapsed","solverStrategy","setSolverStrategy","strategy","logs","solutionSteps","timeElapsedLog","gamesBoardLog","addSolutionStepsLog","keys","push","date","Date","toLocaleString","toConsumableArray","resetLog","logName","stopTimer","startTimer","now","cross","A","B","_step","C","_iterator","_createForOfIteratorHelper","s","n","done","_step2","_iterator2","b","err","e","f","squares","sectionList","_step4","_iterator4","_step5","rs","_iterator5","cs","SectionList","unitList","col","row","units","reduce","filter","ul","item","list","_step3","_iterator3","member","peers","_step6","_iterator6","square","_step7","_iterator7","_step8","_iterator8","square2","Peers","getSectionUnits","sectionNumber","values","i","length","unit","generateValuesState","_step9","valuesState","sectionRows","_iterator9","String","getBoardState","dict","result","objectSpread","defineProperty","center","w","excess","display","seg","line","join","r","c","isCompleted","all","cb","_step11","_iterator11","isSolved","sort","isUnitSolved","log","digit","squareMsg","hasPairValues","includes","getPairSquares","getOuterPeers","innerList","outerList","unsolvedSquares","canEliminate","search","s1","s2","getSquaresWithFewestCandidates","_step10","_iterator10","response","some","assign","copy","inObject","outObject","Array","isArray","otherValues","replace","otherValue","eliminate","indexOf","digit2","peersKeys","solver_createForOfIteratorHelper","digitPlaces","parseGrid","grid","input","gridValues","searchPointPair","_ref","asyncToGenerator","regenerator_default","mark","_callee","_loop","_ret","wrap","_context","prev","next","abrupt","digits","findPointPair","v","t0","finish","t1","stop","_x","apply","this","arguments","unitCol","unitRow","unitRows","sq","unitCols","rowPeers","colPeers","unitRowPeers","unitColPeers","pairSquaresCol","pairSquaresRow","solveBoard","_ref2","_callee2","loopCounter","loopLimit","isAborted","stopLoop","solved","completed","solveBoardResult","analysisBoard","solveTimer","_context2","timer","abort","sent","console","_x2","app","initialBoard","emptyBoard","_useState","_useState2","initialParsedBoardState","setInitialParsedBoardState","isSolvingBoard","setIsSolvingBoard","_useState3","_useState4","initialBoardState","setInitialBoardState","_useState5","_useState6","solveBoardState","setSolveBoardState","_useState7","_useState8","_useState9","_useState10","solutionStepsState","setSolutionStepsState","_useState11","_useState12","statusSolveBoardState","setStatusSolveState","_useState13","_useState14","newBoardStringState","setNewBoardStringState","_useState15","_useState16","currentBoardStringState","setCurrentBoardStringState","_useState17","_useState18","timerSolveBoardState","setTimerSolveState","_useState19","enterNewBoard","_useState20","newBoardState","setNewBoardState","_useState21","_useState22","abortSolveBoardState","setAbortSolveBoardState","_useState23","_useState24","newBoardModalErrorState","setNewBoardModalErrorState","closeModalHandler","src","logo","alt","me","Circle","Board","SolveBoard","then","timerSolverState","toFixed","StatusMessage","StepLogs","Modal","NewBoardForm","event","target","entryString","test","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","App","document","getElementById","URL","process","origin","addEventListener","fetch","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.056e8c23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nextstack-logo.b093b40d.png\";","module.exports = __webpack_public_path__ + \"static/media/jp.900a0989.png\";","import React, { useState } from 'react'; \nimport './style.css';\n\nconst cell = (props) => {\n    const cellValue = props.cell.value === '.' ? '\\u00A0' : props.cell.value;\n    return (\n        <div className={props.class} key={props.cell.key}>\n            <div className=\"cell-value\">{cellValue}</div>\n        </div> \n    )    \n}\n\nexport default cell;","import React, { useState } from 'react';\nimport './style.css';\nimport Cell from './Cell/Cell';\n\nconst cellRow = (props) => {\n\treturn props.cells.map((cell, index) => {\n\t\treturn <Cell class=\"game-cell\" key={cell.key} cell={cell} />;\n\t});\n};\n\nexport default cellRow;\n","import React from 'react';\nimport './style.css';\nimport CellRow from './CellRow/CellRow';\n\nconst section = (props) => {\n\treturn props.cellRows.map((cellRow, index) => {\n\t\treturn (\n\t\t\t<div className=\"section-row\" key={props.nameKey + '-cellRow-' + index}>\n\t\t\t\t<CellRow\n\t\t\t\t\tclass=\"cell-row\"\n\t\t\t\t\tnameKey={props.nameKey + '-cellRow-' + index}\n\t\t\t\t\tcells={cellRow}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t});\n};\n\nexport default section;\n","import React, { useState } from 'react';\nimport './style.css';\nimport Section from './Section/Section';\n\nconst sectionRow = (props) => {\n\treturn props.sectionRow.map((section) => {\n\t\treturn (\n\t\t\t<div className=\"game-section\" key={props.nameKey + '-' + section.key}>\n\t\t\t\t<Section\n\t\t\t\t\tnameKey={props.nameKey + '-section-' + section.key}\n\t\t\t\t\tcellRows={section.cellRows}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t});\n};\n\nexport default sectionRow;\n","import React from 'react';\nimport './style.css';\nimport SectionRow from './SectionRow/SectionRow';\n\nconst sections = (props) => {\n\treturn props.sections.map((sectionRow, sectionIndex) => {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"game-sections-row\"\n\t\t\t\tkey={props.nameKey + '-sections-' + sectionIndex}\n\t\t\t>\n\t\t\t\t<SectionRow\n\t\t\t\t\tnameKey={props.nameKey + '-sectionRow-' + sectionIndex}\n\t\t\t\t\tsectionRow={sectionRow}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t});\n};\n\nexport default sections;\n","import React, { useState } from 'react';\nimport './style.css';\nimport Sections from './Sections/Sections';\n\nconst board = (props) => {\n\tlet sections = null;\n\n\tif (props.board) {\n\t\tsections = (\n\t\t\t<div>\n\t\t\t\t<Sections\n\t\t\t\t\tnameKey={props.name + '-sections'}\n\t\t\t\t\tsections={props.board.sections}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn <div className={props.class}>{sections}</div>;\n};\n\nexport default board;\n","import React from 'react';\nimport './style.css';\n\nconst spinner = (props) => {\n\treturn <div className=\"spinner\" />;\n};\n\nexport default spinner;\n","import React from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport { useSpring, animated } from 'react-spring';\nimport './style.css';\n\nconst button = (props) => {\n\t/* showSpinner is used to stay in the \"isSpinning state\" a bit longer \n    to avoid loading flashes if the loading state is too short. */\n\tconst [showSpinner, setShowSpinner] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tif (props.isSpinning) {\n\t\t\tsetShowSpinner(true);\n\t\t}\n\n\t\t// Show loader a bits longer to avoid loading flash\n\t\tif (!props.isSpinning && showSpinner) {\n\t\t\tconst timeout = setTimeout(() => {\n\t\t\t\tsetShowSpinner(false);\n\t\t\t}, 300);\n\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t};\n\t\t}\n\t}, [props.isSpinning, showSpinner]);\n\n\tconst [width, setWidth] = React.useState(0);\n\tconst [height, setHeight] = React.useState(0);\n\tconst ref = React.useRef(null);\n\n\tReact.useEffect(() => {\n\t\tif (ref.current && ref.current.getBoundingClientRect().width) {\n\t\t\tsetWidth(ref.current.getBoundingClientRect().width);\n\t\t}\n\t\tif (ref.current && ref.current.getBoundingClientRect().height) {\n\t\t\tsetHeight(ref.current.getBoundingClientRect().height);\n\t\t}\n\t}, [props.classes]);\n\n\tconst fadeOutProps = useSpring({ opacity: showSpinner ? 1 : 0 });\n\tconst fadeInProps = useSpring({ opacity: showSpinner ? 0 : 1 });\n\n\treturn (\n\t\t<a\n\t\t\tref={ref}\n\t\t\tstyle={\n\t\t\t\tshowSpinner\n\t\t\t\t\t? {\n\t\t\t\t\t\t\twidth: `${width}px`,\n\t\t\t\t\t\t\theight: `${height}px`,\n\t\t\t\t\t  }\n\t\t\t\t\t: {}\n\t\t\t}\n\t\t\tonClick={props.click}\n\t\t\tclassName={props.classes}\n\t\t>\n\t\t\t{showSpinner ? (\n\t\t\t\t<animated.div style={fadeOutProps}>\n\t\t\t\t\t<Spinner />\n\t\t\t\t</animated.div>\n\t\t\t) : (\n\t\t\t\t<animated.div style={fadeInProps}>{props.label}</animated.div>\n\t\t\t)}\n\t\t</a>\n\t);\n};\n\nexport default button;\n","import React from 'react'; \nimport './style.css';\n\nconst circle = (props) => {\n    return <div className={props.classes}>{props.label}</div>\n}\n\nexport default circle;","import React, { useState } from 'react';\nimport './style.css';\n\nconst solutionStep = (props) => {\n\treturn (\n\t\t<div className={props.classes} key={props.solutionStepNumber}>\n\t\t\t<div className=\"title\">\n\t\t\t\tStep {props.solutionStepNumber}: {props.solutionStep.method}\n\t\t\t</div>\n\t\t\t<div className=\"details\">{props.solutionStep.msg}</div>\n\t\t</div>\n\t);\n};\n\nexport default solutionStep;\n","import React from 'react';\nimport './style.css';\nimport SolutionStep from './SolutionStep/SolutionStep';\n\nconst logsDetails = (props) => {\n\tif (props.stepsLog) {\n\t\treturn props.stepsLog.map((stepRow, stepIndex) => {\n\t\t\treturn (\n\t\t\t\t<div className=\"log-detail-row\" key={'logsDetails-' + stepIndex + 1}>\n\t\t\t\t\t<SolutionStep\n\t\t\t\t\t\tsolutionStepNumber={stepIndex + 1}\n\t\t\t\t\t\tsolutionStep={stepRow}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t} else {\n\t\treturn <div className=\"log-detail-row\"></div>;\n\t}\n};\n\nexport default logsDetails;\n","import React, { useState } from 'react';\nimport './style.css';\nimport LogsDetails from './LogsDetails/LogsDetails';\n\nconst stepsLog = (props) => {\n\treturn (\n\t\t<div className={props.classes}>\n\t\t\t<div className=\"title\">Solution Steps</div>\n\t\t\t<div className=\"intro\">\n\t\t\t\tHere you can view the logical steps used to solve the board\n\t\t\t</div>\n\t\t\t<LogsDetails classes=\"log-details\" stepsLog={props.stepsLog} />\n\t\t</div>\n\t);\n};\n\nexport default stepsLog;\n","import React from 'react';\nimport './style.css';\n\nconst backdrop = (props) =>\n\tprops.show ? <div className=\"backdrop\" onClick={props.clicked}></div> : null;\n\nexport default backdrop;\n","import React from 'react';\nimport './style.css';\nimport Backdrop from '../../components/Backdrop/Backdrop';\n\nconst modal = (props) => (\n\t<div>\n\t\t<Backdrop show={props.show} clicked={props.modalClosed} />\n\t\t<div\n\t\t\tclassName=\"Modal\"\n\t\t\tstyle={{\n\t\t\t\ttransform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n\t\t\t\topacity: props.show ? '1' : '0',\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t</div>\n);\n\nexport default modal;\n","import React from 'react';\nimport './style.css';\n\nconst alertTriangle = (props) => {\n\treturn (\n\t\t<div className={props.classes}>\n\t\t\t<svg\n\t\t\t\twidth=\"1.0625em\"\n\t\t\t\theight=\"1em\"\n\t\t\t\tviewBox=\"0 0 17 16\"\n\t\t\t\tclassName=\"bi bi-exclamation-triangle-fill\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\td=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 5zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</div>\n\t);\n};\n\nexport default alertTriangle;\n","import React, { useState } from 'react';\nimport './style.css';\nimport AlertTriangle from '../../Icons/AlertTriangle/AlertTriangle';\n\nconst errorMessage = (props) => {\n\tlet message = null;\n\n\tif (props.error === 'invalid-length') {\n\t\tmessage = (\n\t\t\t<div className={props.classes}>\n\t\t\t\t<AlertTriangle classes=\"App-icon abort-board\" />\n\t\t\t\t<h5 className=\"App-status-message\">\n\t\t\t\t\tThe string length must be equal to 81\n\t\t\t\t</h5>\n\t\t\t</div>\n\t\t);\n\t} else if (props.error === 'empty-value') {\n\t\tmessage = (\n\t\t\t<div className={props.classes}>\n\t\t\t\t<AlertTriangle classes=\"App-icon abort-board\" />\n\t\t\t\t<h4 className=\"App-status-abort-message\">Enter a valid string</h4>\n\t\t\t</div>\n\t\t);\n\t} else if (props.error === 'invalid-value') {\n\t\tmessage = (\n\t\t\t<div className={props.classes}>\n\t\t\t\t<AlertTriangle classes=\"App-icon abort-board\" />\n\t\t\t\t<h4 className=\"App-status-abort-message\">\n\t\t\t\t\tValid values must be . and numbers in the range 1-9\n\t\t\t\t</h4>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\tmessage = <div className={props.classes}></div>;\n\t}\n\n\treturn message;\n};\n\nexport default errorMessage;\n","import React, { useRef, useEffect } from 'react';\nimport './style.css';\nimport Button from '../../components/Button/Button';\nimport ErrorMessage from './ErrorMessage/ErrorMessage';\n\nconst newBoardForm = (props) => {\n\tconst inputRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tinputRef.current.focus();\n\t});\n\n\treturn (\n\t\t<div className=\"new-board\">\n\t\t\t<h3>Enter a Sudoku string board</h3>\n\t\t\t<p>Valid strings could contain dots and numbers</p>\n\t\t\t<input\n\t\t\t\tref={inputRef}\n\t\t\t\tclassName=\"board-text-input\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tonChange={props.changed}\n\t\t\t\tvalue={props.currentStringBoard || ''}\n\t\t\t\tplaceholder=\"e.g.  4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......\"\n\t\t\t/>\n\t\t\t<div className=\"action-row\">\n\t\t\t\t<ErrorMessage classes=\"errors\" error={props.error} />\n\t\t\t\t<div className=\"action-buttons marginTop15\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses=\"btn btn-small btn-close marginLeft10\"\n\t\t\t\t\t\tlabel=\"Close\"\n\t\t\t\t\t\tclick={props.modalClosed}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses=\"btn btn-small marginLeft10\"\n\t\t\t\t\t\tclick={props.clicked}\n\t\t\t\t\t\tlabel=\"Ok\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default newBoardForm;\n","import React from 'react';\nimport './style.css';\n\nconst checkCircle = (props) => {\n\treturn (\n\t\t<div className={props.classes}>\n\t\t\t<svg\n\t\t\t\twidth=\"1em\"\n\t\t\t\theight=\"1em\"\n\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\tclassName=\"bi bi-check-circle-fill\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\td=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</div>\n\t);\n};\n\nexport default checkCircle;\n","import React from 'react';\nimport './style.css';\n\nconst xCircle = (props) => {\n\treturn (\n\t\t<div className={props.classes}>\n\t\t\t<svg\n\t\t\t\twidth=\"1em\"\n\t\t\t\theight=\"1em\"\n\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\tclassName=\"bi bi-x-circle-fill\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\td=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</div>\n\t);\n};\n\nexport default xCircle;\n","import React from 'react';\nimport './style.css';\n\nconst stopWatch = (props) => {\n\treturn (\n\t\t<div className={props.classes}>\n\t\t\t<svg\n\t\t\t\twidth=\"1em\"\n\t\t\t\theight=\"1em\"\n\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\tclasses=\"bi bi-stopwatch\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tfillRule=\"evenodd\"\n\t\t\t\t\td=\"M6 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H9v1.07A7.001 7.001 0 0 1 8 16 7 7 0 0 1 7 2.07V1h-.5A.5.5 0 0 1 6 .5zM8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3zm0 2.1a.5.5 0 0 1 .5.5V9a.5.5 0 0 1-.5.5H4.5a.5.5 0 0 1 0-1h3V5.6a.5.5 0 0 1 .5-.5z\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</div>\n\t);\n};\n\nexport default stopWatch;\n","export const digits = '123456789';\nexport const letters = 'ABCDEFGHI';\nexport const rows = letters.split('');\nexport const cols = digits.split('');\nexport const validNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nexport const validSectionRows = [1, 2, 3];\n\nexport const rRows = [\n\t['A', 'B', 'C'],\n\t['D', 'E', 'F'],\n\t['G', 'H', 'I'],\n];\n\nexport const cCols = [\n\t['1', '2', '3'],\n\t['4', '5', '6'],\n\t['7', '8', '9'],\n];\n\nexport const STATUS = {\n\tABORT: 'abort',\n\tVALID: 'valid',\n\tINVALID: 'invalid',\n\tCOMPLETED: 'completed',\n\tUNKNOWN: 'unknown',\n\tTIMER: 'timer',\n};\n\nexport const STRATEGIES = {\n\tHIDDEN_SINGLE: 'Hidden Single in cell',\n\tNAKED_SINGLE: 'Naked Single in cell',\n\tPOINTING_PAIRS: 'Pointing Pair in cells',\n\tBACKTRACKING: 'Backtracking search',\n};\n\n// String used to clean the board.\nexport const emptySudokuString = '.'.repeat(81);\n\nexport const acceptedStringRegExp = /^(([1-9]|\\.)+|\\W+)$/g;\n\n// Default sudoku string (valid)\nexport const initialSudokuString =\n\t'4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......';\n","import React, { useState } from 'react';\nimport './style.css';\nimport CheckCircle from '../Icons/CheckCircle/CheckCircle';\nimport XCircle from '../Icons/XCircle/XCircle';\nimport AlertTriangle from '../Icons/AlertTriangle/AlertTriangle';\nimport StopWatch from '../Icons/Stopwatch/Stopwatch';\nimport { STATUS } from '../../services/Solver/constants';\n\nconst statusMessage = (props) => {\n\tlet message = null;\n\n\tif (props.status === STATUS.VALID) {\n\t\tmessage = (\n\t\t\t<div className={props.classes}>\n\t\t\t\t<CheckCircle classes=\"App-icon solved-board\" />\n\t\t\t\t<h5 className=\"App-status-message\">This Board is Valid</h5>\n\t\t\t</div>\n\t\t);\n\t} else if (props.status === STATUS.INVALID) {\n\t\tmessage = (\n\t\t\t<div className={props.classes}>\n\t\t\t\t<XCircle classes=\"App-icon unsolved-board\" />\n\t\t\t\t<h5 className=\"App-status-message\">This Board is unsolved</h5>\n\t\t\t</div>\n\t\t);\n\t} else if (props.status === STATUS.ABORT) {\n\t\tmessage = (\n\t\t\t<div className={props.classes}>\n\t\t\t\t<AlertTriangle classes=\"App-icon abort-board\" />\n\t\t\t\t<h4 className=\"App-status-abort-message\">\n\t\t\t\t\tThe processing is taking more time than expected and maybe cannot be\n\t\t\t\t\tsolved with the current version. Please try another board.\n\t\t\t\t</h4>\n\t\t\t</div>\n\t\t);\n\t} else if (props.status === STATUS.TIMER) {\n\t\tmessage = (\n\t\t\t<div className={props.classes}>\n\t\t\t\t<StopWatch classes=\"App-icon timer-solve\" />\n\t\t\t\t<h5 className=\"App-status-message\">\n\t\t\t\t\tTime elapsed: {props.timeElapsed} ms\n\t\t\t\t</h5>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\tmessage = <div></div>;\n\t}\n\n\treturn message;\n};\n\nexport default statusMessage;\n","import { STRATEGIES } from './constants';\n\nlet solverStrategy = '';\n\nexport const setSolverStrategy = (strategy) => {\n\tsolverStrategy = strategy;\n};\n\nexport const clearSolverStrategy = () => {\n\tsolverStrategy = '';\n};\n\nconst logs = {\n\tsolutionSteps: [],\n\ttimeElapsedLog: [],\n\tgamesBoardLog: [],\n};\n\nexport const addTimeElapsedLog = (\n\ttimeElapsed,\n\tboardName,\n\trunCount,\n\tstatus,\n\tmsg\n) => {\n\tlogs.timeElapsedLog.push({\n\t\tdate: new Date().toLocaleString(),\n\t\ttimeElapsed: timeElapsed,\n\t\tboardName: boardName,\n\t\trunCount: runCount,\n\t\tstatus: status,\n\t\tmsg: msg,\n\t});\n};\n\nexport const addSolutionStepsLog = (strategy, keys, value, method, msg) => {\n\tif (solverStrategy !== STRATEGIES.BACKTRACKING) {\n\t\tlogs.solutionSteps.push({\n\t\t\tstrategy: strategy,\n\t\t\tdate: new Date().toLocaleString(),\n\t\t\tkeys: [...keys],\n\t\t\tvalue: value,\n\t\t\tmethod: method,\n\t\t\tmsg: msg,\n\t\t});\n\t}\n};\n\nexport const getLog = (logName) => {\n\treturn logs[logName];\n};\n\nexport const showSolutionStepsLog = () => {\n\tconsole.log('Solution Steps: ', logs.solutionSteps);\n};\n\nexport const resetLog = (logName) => {\n\tlogs[logName] = [];\n\treturn logs[logName];\n};\n\nexport const startTimer = () => {\n\treturn Date.now();\n};\n\nexport const stopTimer = (startTimer) => {\n\treturn Date.now() - startTimer;\n};\n","import { addSolutionStepsLog } from './logs';\nimport { digits, rows, cols, rRows, cCols, STRATEGIES } from './constants';\n\n// Cross product of elements in A and elements in B.\nexport const cross = (A, B) => {\n\tconst C = [];\n\tfor (const a of A) for (const b of B) C.push(a + b);\n\treturn C;\n};\n\nexport const member = (item, list) => {\n\tfor (const elem of list) if (item === elem) return true;\n\treturn false;\n};\n\nexport const Squares = () => {\n\treturn cross(rows, cols);\n};\n\nexport const squares = Squares();\n\nexport const SectionList = () => {\n\tconst sectionList = [];\n\tfor (const rs of rRows)\n\t\tfor (const cs of cCols) sectionList.push(cross(rs, cs));\n\treturn sectionList;\n};\n\nexport const sectionList = SectionList();\n\nexport const UnitList = () => {\n\treturn [\n\t\t...cols.map((col) => cross(rows, [col])),\n\t\t...rows.map((row) => cross([row], cols)),\n\t\t...sectionList,\n\t];\n};\n\nexport const unitList = UnitList();\n\nexport const Units = () => {\n\treturn squares.reduce((units, key) => {\n\t\tunits[key] = unitList.filter((ul) => member(key, ul));\n\t\treturn units;\n\t}, []);\n};\n\nexport const units = Units();\n\nexport const Peers = () => {\n\tlet peers = {};\n\tfor (const square of squares) {\n\t\tpeers[square] = {};\n\t\tfor (const unit of units[square]) {\n\t\t\tfor (const square2 of unit) {\n\t\t\t\tif (square2 !== square) {\n\t\t\t\t\tpeers[square][square2] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn peers;\n};\n\nexport const peers = Peers();\n\nconst getSectionUnits = (sectionNumber, values) => {\n\tlet cellRows = [];\n\tlet sectionRow = [];\n\tfor (let i = 1; i <= sectionList[sectionNumber - 1].length; i++) {\n\t\tconst unit = sectionList[sectionNumber - 1][i - 1];\n\t\tsectionRow.push({\n\t\t\tkey: unit,\n\t\t\tvalue: values[unit].length === 1 ? values[unit] : '.',\n\t\t});\n\t\tif (i % 3 === 0) {\n\t\t\tcellRows = [...cellRows, sectionRow];\n\t\t\tsectionRow = [];\n\t\t}\n\t}\n\treturn cellRows;\n};\n\n// Transform a valid sudoku model into an UI Board state\nexport const generateValuesState = (values) => {\n\tlet valuesState = [];\n\tlet sectionRows = [];\n\tfor (const sectionNumber of digits.split('')) {\n\t\tsectionRows.push({\n\t\t\tkey: String(sectionNumber),\n\t\t\tcellRows: getSectionUnits(sectionNumber, values),\n\t\t});\n\t\tif (sectionNumber % 3 === 0) {\n\t\t\tvaluesState = [...valuesState, [...sectionRows]];\n\t\t\tsectionRows = [];\n\t\t}\n\t}\n\treturn valuesState;\n};\n\n// Generate a board state based on a valid sudoku string.\nexport const getBoardState = (values) => {\n\treturn { sections: generateValuesState(values) };\n};\n\nexport const copy = (inObject) => {\n\tlet outObject, value, key;\n\n\tif (typeof inObject !== 'object' || inObject === null) {\n\t\treturn inObject; // Return the value if inObject is not an object\n\t}\n\n\t// Create an array or object to hold the values\n\toutObject = Array.isArray(inObject) ? [] : {};\n\n\tfor (key in inObject) {\n\t\tvalue = inObject[key];\n\n\t\t// Recursively (deep) copy for nested objects, including arrays\n\t\toutObject[key] = copy(value);\n\t}\n\n\treturn outObject;\n};\n\nexport const dict = (keys, values) => {\n\tif (typeof values === 'string' || values === null) {\n\t\treturn keys.reduce((result, key) => ({ ...result, [key]: values }), {});\n\t} else if (typeof values === 'object') {\n\t\treturn keys.reduce(\n\t\t\t(result, key, i) => ({ ...result, [key]: values[i] }),\n\t\t\t{}\n\t\t);\n\t}\n};\n\nexport const center = (s, w) => {\n\tlet excess = w - s.length;\n\twhile (excess > 0) {\n\t\tif (excess % 2) s += ' ';\n\t\telse s = ' ' + s;\n\t\texcess -= 1;\n\t}\n\treturn s;\n};\n\nexport const display = (values) => {\n\t// Used for debugging\n\tlet width = 0;\n\tfor (var s in squares) {\n\t\tif (values[squares[s]].length > width) width = values[squares[s]].length;\n\t}\n\n\twidth += 1;\n\tlet seg = '';\n\tfor (var i = 0; i < width; i++) seg += '---';\n\tconst line = '\\n' + [seg, seg, seg].join('+');\n\tlet board = '';\n\tfor (var r in rows) {\n\t\tfor (var c in cols) {\n\t\t\tboard += center(values[rows[r] + cols[c]], width);\n\t\t\tif (c == 2 || c == 5) board += '|';\n\t\t}\n\t\tif (r == 2 || r == 5) board += line;\n\t\tboard += '\\n';\n\t}\n\tboard += '\\n';\n\treturn board;\n};\n\nexport const isCompleted = (values) => {\n\treturn all(Object.values(values), (square) => square.length === 1);\n};\n\n//Return some element of values that is true.\nexport const some = (values, cb) => {\n\tfor (const digit of values) {\n\t\tconst response = cb(digit);\n\t\tif (response) {\n\t\t\treturn response;\n\t\t}\n\t}\n\treturn false;\n};\n\n// check if all list values are valid with cb\nexport const all = (list, cb) => {\n\tfor (const value of list) {\n\t\tif (!cb(value)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n// check if an unit is resolved.\nexport const isUnitSolved = (unit, values) => {\n\treturn (\n\t\tunit\n\t\t\t.map((square) => values[square])\n\t\t\t.sort()\n\t\t\t.join('') === digits\n\t);\n};\n\nexport const isSolved = (values) => {\n\t//A puzzle is solved if each unit is a permutation of the digits 1 to 9.\n\treturn (\n\t\tvalues !== false && all(unitList, (unit) => isUnitSolved(unit, values))\n\t);\n};\n\nexport const getSquaresWithFewestCandidates = (values) => {\n\treturn squares\n\t\t.filter((square) => values[square].length > 1)\n\t\t.sort((s1, s2) => values[s1].length - values[s2].length);\n};\n\nexport const log = (strategy, squares, digit) => {\n\tif (strategy === STRATEGIES.BACKTRACKING) {\n\t\taddSolutionStepsLog(\n\t\t\tstrategy,\n\t\t\t[],\n\t\t\t0,\n\t\t\t'Backtrack Search',\n\t\t\t\"From this point was applied Peter Norvig's backtracking search algorithm that to solve every sudoku puzzle.\"\n\t\t);\n\t} else {\n\t\tconst squareMsg =\n\t\t\tsquares.length > 1 ? squares[0] + ', ' + squares[1] : squares[0];\n\t\tconst msg =\n\t\t\tsquares.length === 1\n\t\t\t\t? 'was solved with the value: ' + digit\n\t\t\t\t: 'These cells are the only cells in section with the candidate value ' +\n\t\t\t\t  digit +\n\t\t\t\t  '. The candidate must be in one of these cells and can be removed from other cells in column or row.';\n\t\taddSolutionStepsLog(\n\t\t\tstrategy,\n\t\t\t[...squares],\n\t\t\tdigit,\n\t\t\tstrategy + ' ( ' + squareMsg + ' )',\n\t\t\tstrategy + ' ( ' + squareMsg + ' ) ' + msg\n\t\t);\n\t}\n};\n\nexport const hasPairValues = (list, values, digit) =>\n\tlist.filter(\n\t\t(square) => values[square].length > 1 && values[square].includes(digit)\n\t).length === 2;\n\nexport const getPairSquares = (list, values, digit) =>\n\tlist.filter((square) => values[square].includes(digit));\n\nexport const getOuterPeers = (innerList, outerList, values) =>\n\tinnerList.filter(\n\t\t(square) => !outerList.includes(square) && values[square].length > 1\n\t);\n\nexport const unsolvedSquares = (list, values) =>\n\tlist.filter((square) => values[square].length > 1);\n\nexport const canEliminate = (list, values, digit) =>\n\tlist.filter((square) => values[square].includes(digit)).length > 0;\n\n// test\n// src/services/Sudoku/tests\n","import { digits, STATUS, STRATEGIES } from './constants';\n\nimport {\n\tall,\n\tcopy,\n\tdict,\n\tisCompleted,\n\tgetSquaresWithFewestCandidates,\n\tsome,\n\tsectionList,\n\tsquares,\n\tunits,\n\tpeers,\n\tlog,\n\thasPairValues,\n\tgetPairSquares,\n\tgetOuterPeers,\n\tunsolvedSquares,\n\tcanEliminate,\n\tshowBoardStatus,\n\tisSolved,\n\tdisplay,\n} from './utils';\n\nimport {\n\tresetLog,\n\tstartTimer,\n\tstopTimer,\n\tgetLog,\n\tsetSolverStrategy,\n} from './logs';\n\n////////////////////////////// Solving Strategies //////////////////////////////////////\n\n/**\n * Backtracking Search with Constraint Propagation\n *\n * Javascript port of Peter Norvig's algorithm that Solve Every Sudoku Puzzle.\n * See http://norvig.com/sudoku.html for his article and explanations.\n * Also, many ideas came from @einaregilsson/sudoku JS solver\n *\n *  This approach systematically try all possibilities until it hit one that works,\n *  therefore has to be the last strategy to be applied.\n *\n *  First make sure we haven't already found a solution or a contradiction,\n *  and if not, choose one unfilled square and consider all its possible values.\n *  One at a time, try assigning the square each value, and searching from the\n *  resulting position. In other words, we search for a value d such that we can\n *  successfully search for a solution from the result of assigning square s to d\n *\n *  Constraint Propagation strategies:\n *     (1: Naked Single) If a square has only one possible value,\n *          then eliminate that value from the square's peers.\n *     (2: Hidden Single) If a unit has only one possible place for a value,\n *          then put the value there.\n *\n *  This strategy can't collect solutions steps are as there are many false\n *  positives attempts before it find the final solution.\n *\n */\n\nexport const search = (values) => {\n\t// Set a global flag to stop collecting solution steps\n\tsetSolverStrategy(STRATEGIES.BACKTRACKING);\n\n\t// Failed earlier\n\tif (!values) return false;\n\n\t// Solved!\n\tif (isCompleted(values)) return values;\n\n\t// Chose the unfilled square with the fewest candidate possibilities\n\tconst square = getSquaresWithFewestCandidates(values)[0];\n\tconst digits = values[square].split('');\n\n\t// Using depth-first search and propagation, try all possible values.\n\treturn some(digits, (digit) => search(assign(copy(values), square, digit)));\n};\n\nexport const assign = (values, square, digit) => {\n\t// Eliminate all the other values (except digit) from values[square] and propagate.\n\t// Return values, except return false if a contradiction is detected.\n\tconst otherValues = values[square].replace(digit, '').split('');\n\tif (all(otherValues, (otherValue) => eliminate(values, square, otherValue))) {\n\t\treturn values;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nexport const eliminate = (values, square, digit) => {\n\t//Eliminate digit from values[square]; propagate when values or places <= 2.\n\t//return values, except return false if a contradiction is detected.\n\n\tif (values[square].indexOf(digit) === -1) {\n\t\t// already eliminated.\n\t\treturn values;\n\t}\n\n\tvalues[square] = values[square].replace(digit, '');\n\n\t// (1) If a square is reduced to one value digit2, then eliminate digit2\n\t// from the peers.\n\tif (values[square].length === 0) {\n\t\t// Contradiction: removed last value\n\t\treturn false;\n\t} else if (values[square].length === 1) {\n\t\tconst digit2 = values[square];\n\t\tconst peersKeys = Object.keys(peers[square]);\n\t\tif (all(peersKeys, (square2) => eliminate(values, square2, digit2))) {\n\t\t\tlog(STRATEGIES.NAKED_SINGLE, [square], digit2);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t//  (2) If a unit is reduced to only one place for a value digit, then put it there.\n\tfor (const unit of units[square]) {\n\t\tconst digitPlaces = unit.filter(\n\t\t\t(square2) => values[square2].indexOf(digit) !== -1\n\t\t);\n\n\t\tif (digitPlaces.length === 0) {\n\t\t\t// Contradiction: no place for this value\n\t\t\treturn false;\n\t\t} else if (digitPlaces.length === 1) {\n\t\t\t// digit can only be in one place in unit; assign it there\n\t\t\tif (assign(values, digitPlaces[0], digit)) {\n\t\t\t\tlog(STRATEGIES.HIDDEN_SINGLE, [square], digit);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn values;\n};\n\nexport const parseGrid = (grid) => {\n\tsetSolverStrategy(STRATEGIES.BACKTRACKING);\n\t// Convert grid to a dict of possible values, {square: digits}, or\n\t// return False if a contradiction is detected.\n\n\tconst values = dict(squares, digits);\n\tconst input = gridValues(grid);\n\n\tfor (const square in input) {\n\t\tconst digit = input[square];\n\t\tif (digits.indexOf(digit) !== -1 && !assign(values, square, digit)) {\n\t\t\treturn false; // (Fail if we can't assign digit to square.)\n\t\t}\n\t}\n\n\treturn values;\n};\n\nconst gridValues = (grid) => {\n\t//Convert grid into a dict of {square: char} with '0' or '.' for empties.\n\tconst parseGrid = grid.replace(/[^0-9\\.]/g, '');\n\treturn dict(squares, parseGrid.split(''));\n};\n\n/************************** End Backtrack Search  ***********************************/\n\n/**\n * Pointing Pairs with Constraint Propagation\n *\n * Looking at each unsolved unit in turn there may be two occurrences\n * of a particular digit. If these digits are aligned on a single row or column,\n * we can remove any digit occurs anywhere else on the row or column outside the unit\n *\n */\nexport const searchPointPair = async (values) => {\n\tsetSolverStrategy(STRATEGIES.POINTING_PAIRS);\n\n\t// Failed earlier\n\tif (!values) return false;\n\n\t// Solved!\n\tif (isCompleted(values)) return values;\n\n\tfor (const section of sectionList) {\n\t\tfor (const square of unsolvedSquares(section, values)) {\n\t\t\tconst digits = values[square].split('');\n\t\t\tif (!all(digits, (digit) => findPointPair(values, square, digit))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn values;\n};\n\nexport const findPointPair = (values, square, digit) => {\n\tconst unitCol = units[square][0];\n\tconst unitRow = units[square][1];\n\tconst unit = units[square][2];\n\tconst unitRows = unit.filter((sq) => sq.includes(square[0]));\n\tconst unitCols = unit.filter((sq) => sq.includes(square[1]));\n\tconst rowPeers = getOuterPeers(unitRow, unitRows, values);\n\tconst colPeers = getOuterPeers(unitCol, unitCols, values);\n\tconst unitRowPeers = getOuterPeers(unit, unitRows, values);\n\tconst unitColPeers = getOuterPeers(unit, unitCols, values);\n\n\tif (hasPairValues(unit, values, digit)) {\n\t\tif (hasPairValues(unitRows, values, digit)) {\n\t\t\t// aligned on a single row\n\t\t\tif (\n\t\t\t\tcanEliminate(rowPeers, values, digit) &&\n\t\t\t\tall(rowPeers, (sq) => eliminate(values, sq, digit))\n\t\t\t) {\n\t\t\t\tconst pairSquaresCol = getPairSquares(unitRows, values, digit);\n\t\t\t\tlog(STRATEGIES.POINTING_PAIRS, pairSquaresCol, digit);\n\t\t\t}\n\t\t} else if (hasPairValues(unitCols, values, digit)) {\n\t\t\t// aligned on a single column\n\t\t\tif (\n\t\t\t\tcanEliminate(colPeers, values, digit) &&\n\t\t\t\tall(colPeers, (sq) => eliminate(values, sq, digit))\n\t\t\t) {\n\t\t\t\tconst pairSquaresRow = getPairSquares(unitCols, values, digit);\n\t\t\t\tlog(STRATEGIES.POINTING_PAIRS, pairSquaresRow, digit);\n\t\t\t}\n\t\t}\n\t} else if (\n\t\thasPairValues(unitCols, values, digit) &&\n\t\t!canEliminate(colPeers, values, digit)\n\t) {\n\t\tif (\n\t\t\tcanEliminate(unitColPeers, values, digit) &&\n\t\t\tall(unitColPeers, (sq) => eliminate(values, sq, digit))\n\t\t) {\n\t\t\tconst pairSquaresCol = getPairSquares(unitCols, values, digit);\n\t\t\tlog(STRATEGIES.POINTING_PAIRS, pairSquaresCol, digit);\n\t\t}\n\t} else if (\n\t\thasPairValues(unitRows, values, digit) &&\n\t\t!canEliminate(rowPeers, values, digit)\n\t) {\n\t\tif (\n\t\t\tcanEliminate(unitRowPeers, values, digit) &&\n\t\t\tall(unitRowPeers, (sq) => eliminate(values, sq, digit))\n\t\t) {\n\t\t\tconst pairSquaresRow = getPairSquares(unitRows, values, digit);\n\t\t\tlog(STRATEGIES.POINTING_PAIRS, pairSquaresRow, digit);\n\t\t}\n\t}\n\n\treturn values;\n};\n\n/**************************** End Pointing Pairs  ***********************************/\n\n/**\n * Async method to solve a sudoku board. Stop on potential\n * infinite loops after a certain number of iterations. It will return\n * a promise until the board is solved or aborted.\n * @param values - The parsed board to be solve.\n *  @returns a promise with the solveBoardResult with\n *  @field timer = timer in ms\n *  @field board = result board\n *  @field solved = 'valid' | 'invalid';\n *\t@field abort = true | false;\n *\t@field completed = true | false;\n *\t@field solutionSteps = array of solutionSteps\n */\nconst solveBoard = async (values) => {\n\tlet loopCounter = 0;\n\tconst loopLimit = 5;\n\tlet isAborted,\n\t\tstopLoop = false;\n\n\tlet solved = isSolved(values);\n\tlet completed = solved || isCompleted(values);\n\n\tconst solveBoardResult = {\n\t\ttimer: 0,\n\t\tboard: values,\n\t\tstatus: solved ? STATUS.VALID : STATUS.INVALID,\n\t\tabort: isAborted,\n\t\tcompleted: completed,\n\t\tsolutionSteps: [],\n\t};\n\n\tif (completed) return solveBoardResult;\n\n\tlet analysisBoard = values;\n\n\tresetLog('solutionSteps');\n\tlet solveTimer = startTimer();\n\n\ttry {\n\t\t// Loop until the board is solved or completed or aborted.\n\t\t// This in case the board will be returned with a non valid state.\n\t\twhile (!solved && !completed && !stopLoop) {\n\t\t\t// Start solving strategies\n\t\t\tanalysisBoard = await searchPointPair(analysisBoard);\n\t\t\t// Add new solvers here, i.e:\n\t\t\t// analysisBoard = await searchHiddenPairsTriples(analysisBoard);\n\t\t\t// analysisBoard = await searchNakedHiddenQuads(analysisBoard);\n\t\t\t// analysisBoard = await searchBoxLineReduction(analysisBoard);\n\t\t\t// End solving strategies\n\n\t\t\tsolved = isSolved(analysisBoard);\n\t\t\tcompleted = isCompleted(analysisBoard);\n\n\t\t\tloopCounter++;\n\n\t\t\tif (!solved && loopCounter >= loopLimit) {\n\t\t\t\t// if board is still unsolved, use backtrack search\n\t\t\t\tlog(STRATEGIES.BACKTRACKING);\n\t\t\t\tanalysisBoard = search(analysisBoard);\n\t\t\t\tsolved = isSolved(analysisBoard);\n\t\t\t\tcompleted = isCompleted(analysisBoard);\n\t\t\t\tisAborted = !solved;\n\t\t\t\tstopLoop = true;\n\t\t\t}\n\t\t}\n\n\t\tsolveBoardResult.board = analysisBoard;\n\t\tsolveBoardResult.timer = stopTimer(solveTimer);\n\t\tsolveBoardResult.status = solved ? STATUS.VALID : STATUS.INVALID;\n\t\tsolveBoardResult.abort = isAborted;\n\t\tsolveBoardResult.completed = completed;\n\t\tsolveBoardResult.solutionSteps = getLog('solutionSteps');\n\n\t\tif (!solved) {\n\t\t\tconsole.log(display(analysisBoard));\n\t\t}\n\n\t\treturn solveBoardResult;\n\t} catch (error) {\n\t\treturn solveBoardResult;\n\t\tshowBoardStatus(values, ' Debugger ');\n\t\tconsole.log('Error solveBoard ', error);\n\t}\n};\n\nexport default solveBoard;\n","import React, { useState, useEffect } from 'react';\nimport logo from '../../assets/nextstack-logo.png';\nimport me from '../../assets/jp.png';\nimport Board from '../Board/Board';\nimport Button from '../Button/Button';\nimport Circle from '../Circle/Circle';\nimport StepsLog from '../StepsLog/StepLogs';\nimport Modal from '../../components/Modal/Modal';\nimport NewBoardForm from '../../components/NewBoardForm/NewBoardForm';\nimport StatusMessage from '../StatusMessage/StatusMessage';\n\nimport {\n\tSTATUS,\n\tinitialSudokuString,\n\tacceptedStringRegExp,\n\temptySudokuString,\n} from '../../services/Solver/constants';\n\nimport SolveBoard, { parseGrid } from '../../services/Solver/solver';\nimport { resetLog } from '../../services/Solver/logs';\nimport { getBoardState } from '../../services/Solver/utils';\n\nimport './style.css';\n\nconst app = (props) => {\n\tuseEffect(() => {\n\t\t//console.log('app component here load');\n\t}, []);\n\n\t// Board Data\n\tconst initialBoard = parseGrid(initialSudokuString);\n\tconst emptyBoard = parseGrid(emptySudokuString);\n\n\tconst [initialParsedBoardState, setInitialParsedBoardState] = useState(\n\t\tparseGrid(initialSudokuString)\n\t);\n\n\tconst [isSolvingBoard, setIsSolvingBoard] = React.useState(false);\n\n\tconst [initialBoardState, setInitialBoardState] = useState(\n\t\tgetBoardState(initialBoard, ' Initial ')\n\t);\n\n\tconst [solveBoardState, setSolveBoardState] = useState(\n\t\tgetBoardState(emptyBoard, ' Empty ')\n\t);\n\n\tconst [spinnerSolveState, setSpinnerSolveState] = useState({\n\t\tstatus: 'show',\n\t\tmsg: 'Solving...',\n\t});\n\n\tconst [solutionStepsState, setSolutionStepsState] = useState();\n\n\tconst [statusSolveBoardState, setStatusSolveState] = useState({\n\t\tstatus: STATUS.UNKNOWN,\n\t});\n\n\tconst [newBoardStringState, setNewBoardStringState] = useState();\n\n\tconst [currentBoardStringState, setCurrentBoardStringState] = useState(\n\t\tinitialSudokuString\n\t);\n\n\tconst [timerSolveBoardState, setTimerSolveState] = useState({\n\t\tstatus: STATUS.UNKNOWN,\n\t\ttimeElapsed: 0,\n\t});\n\n\tconst [newBoardState, setNewBoardState] = useState({ enterNewBoard: false });\n\n\tconst [abortSolveBoardState, setAbortSolveBoardState] = useState(false);\n\n\tconst [newBoardModalErrorState, setNewBoardModalErrorState] = useState();\n\n\tconst isStringBoardValid = (entryString) => {\n\t\tif (!entryString) {\n\t\t\tsetNewBoardModalErrorState('empty-value');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!acceptedStringRegExp.test(entryString)) {\n\t\t\tsetNewBoardModalErrorState('invalid-value');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (entryString.length !== 81) {\n\t\t\tsetNewBoardModalErrorState('invalid-length');\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst onUseDefaultBoardHandler = () => {\n\t\t// Cleanup\n\t\tsetSolutionStepsState(resetLog('solutionSteps'));\n\t\tsetSolveBoardState(getBoardState(emptyBoard, ' Empty '));\n\n\t\tsetStatusSolveState({ status: STATUS.UNKNOWN });\n\t\tsetAbortSolveBoardState({ status: STATUS.UNKNOWN });\n\t\tsetTimerSolveState({ status: STATUS.UNKNOWN, timeElapsed: 0 });\n\t\tsetNewBoardModalErrorState('');\n\n\t\t//Initial UI Board\n\t\tsetInitialParsedBoardState(parseGrid(initialSudokuString));\n\t\tsetInitialBoardState(getBoardState(initialBoard), ' Default ');\n\t\tsetCurrentBoardStringState(initialSudokuString);\n\t};\n\n\tconst onClearGameHandler = () => {\n\t\t//Initialization\n\t\tsetSolutionStepsState(resetLog('solutionSteps'));\n\t\tsetSolveBoardState(getBoardState(emptyBoard, ' Empty '));\n\n\t\tsetInitialParsedBoardState(parseGrid(currentBoardStringState));\n\t\tsetInitialBoardState(\n\t\t\tgetBoardState(parseGrid(currentBoardStringState)),\n\t\t\t' Default '\n\t\t);\n\n\t\t// Cleanup\n\t\tsetAbortSolveBoardState({ status: STATUS.UNKNOWN });\n\t\tsetStatusSolveState({ status: STATUS.UNKNOWN });\n\t\tsetTimerSolveState({ status: STATUS.UNKNOWN, timeElapsed: 0 });\n\t\tsetNewBoardModalErrorState('');\n\t};\n\n\tconst changeInitialBoardHandler = () => {\n\t\tif (isStringBoardValid(newBoardStringState)) {\n\t\t\tsetNewBoardModalErrorState('');\n\t\t\tsetNewBoardState({ enterNewBoard: false });\n\t\t\tsetAbortSolveBoardState({ status: STATUS.UNKNOWN });\n\t\t\tsetStatusSolveState({ status: STATUS.UNKNOWN });\n\t\t\tsetTimerSolveState({ status: STATUS.UNKNOWN, timeElapsed: 0 });\n\n\t\t\tsetSolutionStepsState(resetLog('solutionSteps'));\n\t\t\tsetSolveBoardState(getBoardState(emptyBoard, ' Empty '));\n\t\t\t// Change Initial board\n\t\t\tsetInitialParsedBoardState(parseGrid(newBoardStringState));\n\t\t\tsetInitialBoardState(\n\t\t\t\tgetBoardState(parseGrid(newBoardStringState), ' New Board ')\n\t\t\t);\n\n\t\t\tsetCurrentBoardStringState(newBoardStringState);\n\t\t\tsetNewBoardStringState('');\n\t\t\tconsole.log(' Its time to change initial board!');\n\t\t} else {\n\t\t\tconsole.log(' newBoardStringState is Empty!');\n\t\t}\n\t};\n\n\tconst onLoadNewBoardHandler = () => {\n\t\tsetNewBoardModalErrorState('');\n\t\tsetNewBoardStringState('');\n\t\tsetNewBoardState({ enterNewBoard: true });\n\t};\n\n\tconst solveBoardHandler = () => {\n\t\tsetIsSolvingBoard(true);\n\t\tSolveBoard(initialParsedBoardState).then((result) => {\n\t\t\t//debugger;\n\t\t\tconst timerSolverState = result.abort\n\t\t\t\t? { status: STATUS.UNKNOWN }\n\t\t\t\t: { status: STATUS.TIMER, timeElapsed: result.timer.toFixed(2) };\n\n\t\t\tsetStatusSolveState({ status: result.status });\n\t\t\tsetAbortSolveBoardState({\n\t\t\t\tstatus: result.abort ? STATUS.ABORT : STATUS.UNKNOWN,\n\t\t\t});\n\t\t\tsetTimerSolveState(timerSolverState);\n\n\t\t\tsetSolveBoardState(getBoardState(result.board, ' Solved '));\n\t\t\tsetSolutionStepsState(result.solutionSteps);\n\n\t\t\t// Keep the same board\n\t\t\tsetInitialParsedBoardState(parseGrid(currentBoardStringState));\n\t\t\tsetInitialBoardState(\n\t\t\t\tgetBoardState(parseGrid(currentBoardStringState), ' Same Board ')\n\t\t\t);\n\n\t\t\tsetIsSolvingBoard(false);\n\t\t});\n\t};\n\n\tconst onLearnClick = () => {\n\t\tconsole.log('onLearnClick  clicked!');\n\t};\n\n\tconst closeModalHandler = () => {\n\t\tsetNewBoardState({ enterNewBoard: false });\n\t\tsetNewBoardStringState('');\n\t\tsetNewBoardModalErrorState('');\n\t};\n\n\tconst newInputBoardHandler = (event) => {\n\t\tsetNewBoardStringState(event.target.value);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<h1 className=\"App-title\">React Sudoku Solver</h1>\n\t\t\t\t<h3 className=\"App-author\">J.P.</h3>\n\t\t\t\t<img src={me} className=\"App-author-image\" alt=\"logo\" />\n\t\t\t</header>\n\n\t\t\t<div className=\"App-body\">\n\t\t\t\t<div className=\"App-game-panel\">\n\t\t\t\t\t<Circle classes=\"circle center-me\" label=\"1\" />\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses=\"btn marginTop15\"\n\t\t\t\t\t\tclick={onLoadNewBoardHandler}\n\t\t\t\t\t\tlabel=\"Load New Board\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Board\n\t\t\t\t\t\tclasses=\"game-board\"\n\t\t\t\t\t\tboard={initialBoardState}\n\t\t\t\t\t\tname=\"initial\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"buttons-row\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclasses=\"btn btn-small\"\n\t\t\t\t\t\t\tclick={onUseDefaultBoardHandler}\n\t\t\t\t\t\t\tlabel=\"Use Default Board\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"App-game-panel\">\n\t\t\t\t\t<Circle classes=\"circle center-me\" label=\"2\" />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclasses=\"btn marginTop15\"\n\t\t\t\t\t\t\tisSpinning={isSolvingBoard}\n\t\t\t\t\t\t\tclick={solveBoardHandler}\n\t\t\t\t\t\t\tlabel=\"Solve\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<Board classes=\"game-board\" board={solveBoardState} name=\"solver\" />\n\t\t\t\t\t<div className=\"buttons-row\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclasses=\"btn btn-small marginLeft10\"\n\t\t\t\t\t\t\tclick={onClearGameHandler}\n\t\t\t\t\t\t\tlabel=\"Clear\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<StatusMessage\n\t\t\t\t\t\tclasses=\"App-message-row\"\n\t\t\t\t\t\tstatus={timerSolveBoardState.status}\n\t\t\t\t\t\ttimeElapsed={timerSolveBoardState.timeElapsed}\n\t\t\t\t\t/>\n\t\t\t\t\t<StatusMessage\n\t\t\t\t\t\tclasses=\"App-message-row\"\n\t\t\t\t\t\tstatus={statusSolveBoardState.status}\n\t\t\t\t\t/>\n\t\t\t\t\t<StatusMessage\n\t\t\t\t\t\tclasses=\"App-message-row\"\n\t\t\t\t\t\tstatus={abortSolveBoardState.status}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"App-game-panel\">\n\t\t\t\t\t<Circle classes=\"circle center-me\" label=\"3\" />\n\t\t\t\t\t<div className=\"buttons-row\">\n\t\t\t\t\t\t<Button classes=\"btn\" click={onLearnClick} label=\"Learn\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<StepsLog classes=\"steps-log\" stepsLog={solutionStepsState} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Modal show={newBoardState.enterNewBoard} modalClosed={closeModalHandler}>\n\t\t\t\t<NewBoardForm\n\t\t\t\t\tmodalClosed={closeModalHandler}\n\t\t\t\t\tchanged={newInputBoardHandler}\n\t\t\t\t\tclicked={changeInitialBoardHandler}\n\t\t\t\t\tcurrentStringBoard={newBoardStringState}\n\t\t\t\t\terror={newBoardModalErrorState}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default app;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}